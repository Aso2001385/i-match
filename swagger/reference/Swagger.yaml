openapi: 3.1.0
x-stoplight:
  id: dsrp4ol3j3ihk
info:
  title: i-Match API
  version: '1.0'
  summary: i-Match のAPI
  description: i-MatchのOpen APIです。
servers:
  - url: 'http://localhost:8080/api'
    description: localhost
  - description: mock
    url: 'http://127.0.0.1:4010'
paths:
  /ac:
    get:
      summary: アクセス確認
      tags:
        - Models
        - Access
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: 'true'
              examples:
                example-1:
                  value:
                    result: 'true'
      operationId: get-ac
      description: アクセスを確認できます。
  /users:
    get:
      summary: User 一覧
      tags:
        - index
        - EndPoint
      responses:
        '200':
          description: HTTP_OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                uniqueItems: true
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - id: 1
                      class: SD3D
                      name: 翔
                      email: 2001195@s.asojuku.ac.jp
                      password: Aso-2001195
                      created_at: '2022-06-29 10:29:50'
                      updated_at: '2022-06-29 10:29:50'
                      deleted_at: null
                    - id: 2
                      class: SD3C
                      name: はじめ
                      email: 2001191@s.asojuku.ac.jp
                      password: Aso-2001195
                      created_at: '2022-06-29 10:29:50'
                      updated_at: '2022-06-29 10:29:50'
                      deleted_at: '2022-06-29 10:29:50'
      operationId: get-users
      description: userの一覧を表示
    post:
      summary: User 作成
      operationId: post-users
      description: userの作成
      tags:
        - store
        - EndPoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  class: SD3D
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
                  password: Aso-2001195
              properties:
                name:
                  type: string
                  example: 翔
                  maxLength: 30
                email:
                  type: string
                  example: 2001195@s.asojuku.ac.jp
                  minLength: 23
                  maxLength: 23
                password:
                  type: string
                  pattern: '(?=.*[a-z)(?=.*[A-Z])(?=.*[0-9])(?=.*[\/\-\_ΔΣΩ])[a-zA-Z0-9]'
                  example: Aso-2001195
                  format: password
                  minLength: 8
              required:
                - name
                - email
                - password
            examples:
              example:
                value:
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
                  password: Aso-2001195
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: ユーザー作成
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
    parameters: []
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: User 詳細
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                    minimum: 1
                    maximum: 255
                    format: int64
                  name:
                    type: string
                    example: 翔
                    maxLength: 30
                  email:
                    type: string
                    format: email
                    pattern: '^[0-9]{7}@s\.asojuku\.ac\.jp'
                    minLength: 23
                    maxLength: 23
                    example: 2001195@s.asojuku.ac.jp
                  created_at:
                    type: string
                    format: date-time
                    example: '2022-07-13T05:26:54.000000Z'
                  updated_at:
                    type: string
                    example: '2022-07-13T05:26:54.000000Z'
                    format: date-time
                  deleted_at:
                    type:
                      - string
                      - 'null'
                    example: 'null'
                  user_skills:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                          format: int64
                          minimum: 1
                          maximum: 255
                        user_id:
                          type: integer
                          format: int64
                          minimum: 1
                          maximum: 255
                          example: 1
                        pratical_flag:
                          type: boolean
                        learning_flag:
                          type: boolean
                        level:
                          type: integer
                          example: 1
                          format: int32
                          minimum: 1
                          maximum: 5
                        created_at:
                          type: string
                          format: date-time
                          example: '2022-07-13T05:26:55.000000Z'
                        updated_at:
                          type: string
                          example: '2022-07-13T05:26:55.000000Z'
                          format: date-time
                        deleted_at:
                          type: string
                          format: date-time
                          example: '2022-07-13T05:26:55.000000Z'
                        name:
                          type: string
                          example: skill1
                        category_id:
                          type: integer
                          format: int64
                          example: 1
                          minimum: 1
                          maximum: 255
              examples:
                example:
                  value:
                    id: 1
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
                    created_at: '2022-07-13T05:26:54.000000Z'
                    updated_at: '2022-07-13T05:26:54.000000Z'
                    deleted_at: 'null'
                    user_skills:
                      - id: 1
                        user_id: 1
                        pratical_flag: true
                        learning_flag: true
                        level: 1
                        created_at: '2022-07-13T05:26:55.000000Z'
                        updated_at: '2022-07-13T05:26:55.000000Z'
                        deleted_at: '2022-07-13T05:26:55.000000Z'
                        name: skill1
                        category_id: 1
      operationId: get-users-id
      tags:
        - show
        - EndPoint
      description: 指定されたIDのuser情報を表示
      parameters: []
    put:
      summary: User 更新
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      operationId: put-users-id
      tags:
        - update
        - EndPoint
      description: 指定されたIDのuser情報を変更
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 翔
              required:
                - name
            examples:
              example:
                value:
                  name: 翔
        description: ニックネームとクラスを変更
    delete:
      summary: User 削除
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-users-id
      tags:
        - delete
        - EndPoint
      description: 指定されたIDのuserを論理削除
  /user/password:
    put:
      summary: User パスワード更新
      tags:
        - EndPoint
        - passUpdate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-user-password
      description: userのpasswordを変更
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  minimum: 1
                  maximum: 255
                  example: 11
                old_password:
                  type: string
                  format: password
                  minLength: 8
                  example: Aso-2001195
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: Aso-2001195
              required:
                - id
                - old_password
                - password
    parameters: []
  /skills:
    post:
      summary: Skill 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-skills
      description: skillの作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  format: int64
                  example: 1
                  maximum: 255
                  minimum: 1
                name:
                  type: string
                  example: skill1
              required:
                - category_id
                - name
            examples:
              example:
                value:
                  category_id: 1
                  name: skill1
    get:
      summary: Skill 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
      operationId: get-skills
      description: skillの一覧を表示
  '/skills/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Skill 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_id:
                    type: integer
                    format: int64
                    example: 1
                    minimum: 1
                    maximum: 255
                  name:
                    type: string
                    maxLength: 100
                    example: skill1
                  depth:
                    type: integer
                    format: int32
                    minimum: 1
                    maximum: 5
                    example: 1
              examples:
                example:
                  value:
                    category_id: 1
                    name: skill1
                    depth: 1
      operationId: get-skills-id
      description: 指定されたIDのskill情報を表示
    delete:
      summary: Skill 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-skills-id
      description: 指定されたIDのskill情報を論理削除
    put:
      summary: Skill 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-skills-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                name:
                  type: string
                  example: skill1
                  maxLength: 100
              required:
                - category_id
                - name
      description: 指定されたIDのskill情報を変更
  /skill-category:
    get:
      summary: Skill category一覧
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillCategory'
      operationId: get-skill-category
    post:
      summary: Skill category作成
      tags: []
      responses: {}
      operationId: post-skill-category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: category1
                  maxLength: 100
  '/skill-category/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: Skill category削除
      tags: []
      responses: {}
      operationId: delete-skill-category-id
    put:
      summary: Skill category更新
      tags: []
      responses: {}
      operationId: put-skill-category-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: category1
                  maxLength: 100
              required:
                - name
  /recruits:
    get:
      summary: Recruit 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recruit'
      operationId: get-recruits
      description: recruit の一覧
    post:
      summary: Recruit 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-recruits
      description: recruitの作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                title:
                  type: string
                  example: flaskの勉強しませんか
                  maxLength: 30
                contents:
                  type: string
                  example: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
                  maxLength: 1024
                purpose:
                  type: string
                  maxLength: 3
                  example: 開発
                persons:
                  type: integer
                  format: int32
                  maximum: 99
                  minimum: 1
                  example: 5
                due:
                  type: string
                  format: date-time
                  example: '2023-07-13 19:12:31'
                skills:
                  type: array
                  items:
                    type: object
                    properties:
                      skill_id:
                        type: integer
                        format: int64
                        example: 1
                        minimum: 1
                        maximum: 255
                      level:
                        type: integer
                        format: int32
                        example: 1
                        minimum: 1
                        maximum: 5
                    required:
                      - skill_id
                      - level
              required:
                - user_id
                - title
                - contents
                - purpose
                - persons
                - due
            examples:
              example-1:
                value:
                  user_id: 1
                  title: flaskの勉強しませんか
                  contents: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
                  purpose: 開発
                  persons: 5
                  due: '2023-07-13 19:12:31'
                  skills:
                    - skill_id: 1
                      level: 1
  '/recruits/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Recruit 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    format: int64
                    example: 1
                    minimum: 1
                    maximum: 255
                  title:
                    type: string
                    example: Flaskの勉強しませんか
                    maxLength: 30
                  contents:
                    type: string
                    example: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
                    maxLength: 1024
                  purpose:
                    type: string
                    example: 開発
                    maxLength: 3
                  persons:
                    type: integer
                    format: int32
                    minimum: 1
                    maximum: 99
                    example: 5
                  due:
                    type: string
                    example: '2019-06-13T15:00:00.0Z'
                    format: date-time
              examples:
                example:
                  value:
                    user_id: 1
                    title: Flaskの勉強しませんか
                    contents: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
                    purpose: 開発
                    persons: 5
                    due: '2019-06-13T15:00:00.0Z'
      operationId: get-recruits-id
      description: 指定されたIDのrecruit情報を表示
    put:
      summary: Recruit 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-recruits-id
      description: 指定されたIDのrecruit情報の更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 30
                  example: Flaskの勉強しませんか
                contents:
                  type: string
                  example: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
                  maxLength: 1024
                purpose:
                  type: string
                  example: 開発
                  maxLength: 3
                persons:
                  type: integer
                  format: int32
                  example: 5
                  minimum: 1
                  maximum: 99
                due:
                  type: string
                  format: date-time
                  example: '2023-07-13 19:12:31'
    delete:
      summary: Recruit 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      operationId: delete-recruits-id
      description: 指定されたIDのrecruit情報を論理削除
  '/recruits/other/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Recruit 自分以外の項目
      tags:
        - EndPoint
        - otherIndex
      responses: {}
      operationId: get-recruits-other-id
  /recruit-skill:
    get:
      summary: Recruit skill 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecruitSkill'
      operationId: get-recruit-skill
      description: recruit skill の一覧
  '/recruit-skill/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Recruit skill 詳細
      tags:
        - Endpoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recruit_id:
                    type: integer
                    minimum: 1
                    maximum: 255
                    example: 1
                    format: int64
                  skill_id:
                    type: integer
                    example: 1
                    minimum: 1
                    maximum: 255
                    format: int64
                  level:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 1
                    format: int32
              examples:
                example:
                  value:
                    recruit_id: 1
                    skill_id: 1
                    level: 1
      operationId: get-recruit-skill-id
      description: 指定されたIDのrecruit skill情報を表示
    put:
      summary: recruit skill 更新
      tags:
        - Endpoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-recruit-skill-id
      description: 指定されたIDのrecruit skill情報を変更
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                skill_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                level:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 5
                  format: int32
              required:
                - skill_id
                - level
    delete:
      summary: recruit skill 削除
      tags:
        - Endpoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-recruit-skill-id
      description: 指定されたIDのrecruit skill情報を論理削除
  /recruit-user:
    get:
      summary: recruit user 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecruitUser'
      operationId: get-recruit-user
      description: recruit user の一覧
    post:
      summary: Recruit user 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-recruit-user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recruit_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                  format: int64
                user_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
              required:
                - recruit_id
                - user_id
      description: recruit user の作成
  '/recruit-user/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Recruit user 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  recruit_id:
                    type: integer
                    example: 1
                    minimum: 1
                    maximum: 255
                    format: int64
                  user_id:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 255
                    example: 1
              examples:
                example:
                  value:
                    recruit_id: 1
                    user_id: 1
      operationId: get-recruit-user-id
      description: 指定されたIDのrecruit user情報を表示
    delete:
      summary: Recruit user 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-recruit-user-id
      description: 指定されたIDのrecruit user情報を論理削除
  /rooms:
    get:
      summary: Room 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
      operationId: get-rooms
      description: room の一覧
  '/rooms/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: Room 削除
      responses: {}
      operationId: delete-rooms-id
      description: 指定されたIDのroom情報を論理削除
      tags:
        - EndPoint
        - delete
    get:
      summary: Room 詳細
      operationId: get-rooms-id
      responses:
        '200':
          description: OK
  /room-user:
    get:
      summary: Room user 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomUser'
      operationId: get-room-user
      description: room user の一覧
    post:
      summary: Room user 作成
      operationId: post-room-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
            application/xml:
              schema:
                type: object
                properties: {}
              examples: {}
      description: room user の作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  users:
                    - 1
                    - 2
              properties:
                users:
                  type: array
                  items:
                    type: integer
                    format: int64
            examples:
              example:
                value:
                  users:
                    - 1
                    - 2
          application/xml:
            schema:
              type: object
              properties: {}
      tags:
        - EndPoint
        - store
  '/room-user/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Room user 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  room_id:
                    type: integer
                    example: 1
                    minimum: 1
                    maximum: 255
                    format: int64
                  user_id:
                    type: integer
                    format: int64
                    example: 1
                    minimum: 1
                    maximum: 255
                  name:
                    type: string
                    example: room1
                    maxLength: 30
      operationId: get-room-user-id
      description: 指定されたIDのroom user情報を表示
    put:
      summary: Room user 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-room-user-id
      description: 指定されたIDのroom user情報を更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: room1
                  maxLength: 30
    delete:
      summary: Room 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-room-user-id
      description: 指定されたIDのroom情報を論理削除
  /chats:
    get:
      summary: Chat 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
      operationId: get-chats
      description: chat の一覧
    post:
      summary: Chat 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-chats
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                user_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                message:
                  type: string
                  example: おはようございます
              required:
                - room_id
                - user_id
                - message
          application/xml:
            schema:
              type: object
              properties:
                room_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                  format: int64
                user_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                  format: int64
                message:
                  type: string
                  maxLength: 255
                  example: おはようございます
                read:
                  type: boolean
              required:
                - room_id
                - user_id
                - message
                - read
            examples: {}
        description: ''
      description: chatの作成
  '/chats/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    put:
      summary: Chat 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-chats-id
      description: 指定されたIDのroom user情報を更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
            examples:
              example:
                value:
                  message: おはようございます
              example-1:
                value:
                  read: true
    delete:
      summary: Chat 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-chats-id
      description: 指定されたIDのroom user情報を論理削除
  /informations:
    post:
      summary: Information 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-informations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                title:
                  type: string
                  example: 参加希望が届きました
                  maxLength: 255
                contents:
                  type: string
                  example: ○○さんから■■の参加希望が届きました
                  maxLength: 1024
                read:
                  type: boolean
                category_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                url:
                  type: string
                  maxLength: 255
                  example: 'https://github.com/Aso2001385/i-match'
              required:
                - user_id
                - title
                - contents
                - read
                - category_id
            examples:
              example-1:
                value:
                  user_id: 1
                  title: 参加希望が届きました
                  contents: ○○さんから■■の参加希望が届きました
                  read: true
                  category_id: 1
                  url: 'https://github.com/Aso2001385/i-match'
    get:
      summary: Information 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Information'
      operationId: get-informations
      description: information の一覧
  '/informations/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: information 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    format: int64
                    minimum: 1
                    maximum: 255
                    example: 1
                  title:
                    type: string
                    example: 参加希望が届きました
                    maxLength: 255
                  contents:
                    type: string
                  read:
                    type: string
                  category_id:
                    type: integer
                    format: int64
                    example: 1
                    minimum: 1
                    maximum: 255
                  url:
                    type: string
                    example: 'http://localhost:8080/index'
                    maxLength: 255
      operationId: get-informations-id
      description: 指定されたIDのinformation情報を表示
    delete:
      summary: information 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-informations-id
      description: 指定されたIDのinformation情報を論理削除
    put:
      summary: information 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-informations-id
      description: 指定されたIDのinformation情報を更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                read:
                  type: boolean
            examples:
              example:
                value:
                  read: true
  /information-category:
    get:
      summary: Information category 一覧
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InformationCategory'
      operationId: get-information-categories
      description: information category の一覧
    post:
      summary: Information category 作成
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-information-categories
      description: information category の作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: information1
                  maxLength: 100
              required:
                - name
            examples:
              example:
                value:
                  name: information1
    parameters: []
  '/information-category/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Informtion category 詳細
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    maxLength: 100
                    example: information1
      operationId: get-information-categoris-id
      description: 指定されたIDのinformation category情報を表示
    put:
      summary: Informtion category 更新
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-information-categoris-id
      description: 指定されたIDのinformation category情報を更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                  example: information1
              required:
                - name
    delete:
      summary: Informtion category 削除
      tags: []
      responses:
        '200':
          description: OK
      operationId: delete-information-categoris-id
      description: 指定されたIDのinformation category情報を論理削除
  /teachers:
    get:
      summary: Teacher 一覧
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
      operationId: get-teachers
      description: teacher の一覧
    post:
      summary: Teacher 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-teachers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 西野　直幸
                  maxLength: 30
                email:
                  type: string
                  format: email
                  maxLength: 25
                  example: nishino@asojuku.ac.jp
                  pattern: '^[a-z]{4,7}@asojuku\.ac\.jp'
                password:
                  type: string
                  format: password
                  example: Aso-2001195
                  minLength: 8
                  pattern: '(?=.*[a-z)(?=.*[A-Z])(?=.*[0-9])(?=.*[\/\-\_ΔΣΩ])[a-zA-Z0-9]'
              required:
                - name
                - email
                - password
            examples:
              example:
                value:
                  name: 西野　直幸
                  email: nishino@asojuku.ac.jp
                  password: Aso-2001195
        description: ''
      description: teacher の作成
  '/teachers/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Teacher 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  password:
                    type: string
                    pattern: '(?=.*[a-z)(?=.*[A-Z])(?=.*[0-9])(?=.*[\/\-\_ΔΣΩ])[a-zA-Z0-9]'
                    format: password
      operationId: get-teachers-id
      description: 指定されたIDのteacher情報を表示
    put:
      summary: Teacher 更新
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-teachers-id
      description: 指定されたIDのteacher情報を更新
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 西野　直幸
              required:
                - name
            examples:
              example:
                value:
                  name: 西野　直幸
    delete:
      summary: Teacher 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-teachers-id
      description: 指定されたIDのteacher情報を削除
  /teacher/password:
    put:
      summary: Teacher パスワード更新
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-teacher-password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                  format: int64
                  minimum: 1
                  maximum: 255
                old_password:
                  type: string
                  format: password
                  example: Aso-2001195
                password:
                  type: string
                  example: Aso-2001195
                  format: password
              required:
                - id
                - old_password
                - password
            examples:
              example:
                value:
                  id: 1
                  old_password: Aso-2001195
                  password: Aso-2001195
  /events:
    get:
      summary: Event 一覧
      tags:
        - EndPoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      operationId: get-events
      description: event の一覧
    post:
      summary: Event 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teacher_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                  format: int64
                title:
                  type: string
                  example: コーディング大会
                  maxLength: 30
                contents:
                  type: string
                  maxLength: 1024
                  example: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
                due:
                  type: string
                  format: date-time
                  example: '2023-06-13 15:00:00'
              required:
                - teacher_id
                - title
                - contents
                - due
            examples:
              example-1:
                value:
                  teacher_id: 1
                  title: コーディング大会
                  contents: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
                  due: '2023-06-13 15:00:00'
      description: event の作成
  '/events/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Event 詳細
      tags:
        - EndPoint
        - show
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  teacher_id:
                    type: integer
                    example: 1
                    format: int64
                    minimum: 1
                    maximum: 255
                  title:
                    type: string
                    example: コーディング大会
                    maxLength: 30
                  contents:
                    type: string
                    example: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
                    maxLength: 1024
                  due:
                    type: string
                    format: date-time
                    example: '2019-06-13T15:00:00.0Z'
      operationId: get-events-id
      description: 指定されたIDのevent情報を表示
    put:
      summary: Event 更新
      tags:
        - EndPoint
        - update
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: put-events-id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: コーディング大会
                  maxLength: 30
                contents:
                  type: string
                  maxLength: 1024
                  example: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
                due:
                  type: string
                  format: date-time
                  example: '2023-06-13 15:00:00'
              required:
                - title
                - contents
                - due
            examples:
              example-1:
                value:
                  title: コーディング大会
                  contents: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
                  due: '2023-06-13 15:00:00'
      description: 指定されたIDのevent情報を更新
    delete:
      summary: Event 削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-events-id
      description: 指定されたIDのevent情報を論理削除
  /skill-requests:
    get:
      summary: Skill request 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillRequest'
      operationId: get-skill-requests
      description: skill request の一覧
    post:
      summary: Skill request 作成
      tags:
        - EndPoint
        - store
      responses: {}
      operationId: post-skill-requests
      description: skill request の作成
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                name:
                  type: string
                  example: skill1
                  maxLength: 255
                message:
                  type: string
                  example: 勉強したいから
                  maxLength: 1024
              required:
                - user_id
                - name
                - message
  '/skill-requests/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: Skill request 削除
      tags:
        - EndPoint
        - delete
      responses: {}
      operationId: delete-skill-requests-id
      description: 指定されたIDのskill request情報を表示
    get:
      summary: Skill request 詳細
      operationId: get-skill-requests-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      description: ''
  /skill-request-teacher:
    get:
      summary: Skill request teacher 一覧
      tags:
        - EndPoint
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillRequestTeacher'
      operationId: get-skill-request-teacher
      description: skill request teacher の一覧
    post:
      summary: Skill request teacher 作成
      tags:
        - EndPoint
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-skill-request-teacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                skill_request_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
                skill_id:
                  type: integer
                  example: 1
                  minimum: 1
                  maximum: 255
                  format: int64
                teacher_id:
                  type: integer
                  format: int64
                  example: 1
                  minimum: 1
                  maximum: 255
              required:
                - skill_request_id
                - skill_id
                - teacher_id
      description: skill request teacher の作成
  '/skill-request-teacher/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: Skill request teacher　削除
      tags:
        - EndPoint
        - delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: delete-skill-request-teacher-id
      description: 指定されたIDのskill request teacher情報を表示
    get:
      summary: ''
      operationId: get-skill-request-teacher-id
      responses:
        '200':
          description: OK
components:
  schemas:
    User:
      type: object
      x-examples:
        example-1:
          id: 1
          class: SD3D
          name: 翔
          email: 2001195@asojuku.ac.jp
          password: Aso-2001195
          created_at: '2022-06-29 10:29:50'
          updated_at: '2022-06-29 10:29:50'
          deleted_at: '2022-06-29 10:29:50'
      examples:
        - id: 1
          name: 翔
          email: 2001195@s.asojuku.ac.jp
          password: Aso-2001195
          created_at: '2022-06-29 10:29:50'
          updated_at: '2022-06-29 10:29:50'
          deleted_at: null
      description: ユーザーModel
      x-tags:
        - Model
        - Users
      title: Userモデル
      properties:
        id:
          type: integer
          example: 1
          format: int64
          minimum: 1
          maximum: 255
        name:
          type: string
          example: 翔
          maxLength: 30
          minLength: 1
        email:
          type: string
          description: 学校用メールアドレス
          example: 2001195@s.asojuku.ac.jp
          format: email
          minLength: 23
          maxLength: 23
          pattern: '^[0-9]{7}@s\.asojuku\.ac\.jp'
        password:
          type: string
          format: password
          pattern: '(?=.*[a-z)(?=.*[A-Z])(?=.*[0-9])(?=.*[\/\-\_ΔΣΩ])[a-zA-Z0-9]'
          example: Aso-2001195
          minLength: 8
        created_at:
          type: string
          format: date-time
          example: '2022-06-29 10:29:50'
        updated_at:
          type: string
          format: date-time
          example: '2022-06-29 10:29:50'
        deleted_at:
          type:
            - string
            - 'null'
          example: '2022-06-29 10:29:50'
          format: date-time
      required:
        - name
        - email
        - password
    UserSkill:
      type: object
      x-examples:
        example-1:
          id: 1
          user_id: 1
          skill_id: 1
          practical_flag: true
          learning_flag: true
          level: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      x-tags:
        - Model
        - Users
        - Skill
      description: ''
      title: ''
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        skill_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        practical_flag:
          type: boolean
        learning_flag:
          type: boolean
        level:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - user_id
        - skill_id
        - practical_flag
        - learning_flag
        - level
      examples:
        - id: 1
          user_id: 1
          skill_id: 1
          practical_flag: true
          learning_flag: true
          level: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    SkillCategory:
      type: object
      x-examples:
        example-1:
          id: 1
          name: name
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      title: ''
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: 言語
          maxLength: 100
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - name
      examples:
        - id: 1
          name: 言語
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    Skill:
      type: object
      x-examples:
        example-1:
          id: 1
          category_id: 1
          name: name
          depth: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      examples:
        - id: 1
          category_id: 1
          name: skill1
          depth: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        category_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: skill1
          maxLength: 100
        depth:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - category_id
        - name
        - depth
    Recruit:
      type: object
      x-examples:
        example-1:
          id: 1
          user_id: 1
          title: name
          contents: name
          purpose_id: 1
          persons: 1
          due: '2022-01-01 11:11:11'
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      examples:
        - id: 1
          user_id: 1
          title: Flaskの勉強しませんか
          contents: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
          purpose: 開発
          persons: 5
          due: '2022-01-01 11:11:11'
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        title:
          type: string
          maxLength: 30
          example: Flaskの勉強しませんか
        contents:
          type: string
          example: Flaskで機械学習のAPIを作成しましょう。初心者歓迎！
          maxLength: 1024
        purpose:
          type: string
          example: 開発
          maxLength: 3
        persons:
          type: integer
          format: int32
          minimum: 1
          example: 5
          maximum: 99
        due:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - user_id
        - title
        - contents
        - purpose
        - persons
        - due
    RecruitSkill:
      type: object
      x-examples:
        example-1:
          id: 1
          recruit_id: 1
          skill_id: 1
          level: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        recruit_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        skill_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        level:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - recruit_id
        - skill_id
        - level
      examples:
        - id: 1
          recruit_id: 1
          skill_id: 1
          level: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    RecruitUser:
      type: object
      x-examples:
        example-1:
          id: 1
          recruit_id: 1
          user_id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        recruit_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - recruit_id
        - user_id
      examples:
        - id: 1
          recruit_id: 1
          user_id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    Room:
      type: object
      x-examples:
        example-1:
          id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      examples:
        - id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    RoomUser:
      type: object
      x-examples:
        example-1:
          id: 1
          room_id: 1
          user_id: 1
          name: name
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        room_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: チャットルーム1
          maxLength: 30
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - room_id
        - user_id
        - name
      examples:
        - id: 1
          room_id: 1
          user_id: 1
          name: チャットルーム1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    Chat:
      type: object
      x-examples:
        example-1:
          id: 1
          room_id: 1
          user_id: 1
          message: name
          read: true
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        room_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        message:
          type: string
          example: おはようございます
          maxLength: 255
        read:
          type: boolean
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - room_id
        - user_id
        - message
        - read
      examples:
        - id: 1
          room_id: 1
          user_id: 1
          message: おはようございます
          read: true
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    Information:
      type: object
      x-examples:
        example-1:
          id: 1
          user_id: 1
          title: string
          contents: string
          read: true
          category_id: 1
          url: string
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      examples:
        - id: 1
          user_id: 1
          title: 参加希望が届きました
          contents: ○○さんから■■の参加希望が届きました
          read: true
          category_id: 1
          url: 'http://localhost:8080/index'
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        title:
          type: string
          maxLength: 255
          example: 参加希望が届きました
        contents:
          type: string
          example: ○○さんから■■の参加希望が届きました
          maxLength: 1024
        read:
          type: boolean
        category_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        url:
          type: string
          example: 'http://localhost:8080/index'
          maxLength: 255
        created_at:
          type: string
          example: '2022-01-01 11:11:11'
          format: date-time
        updated_at:
          type: string
          example: '2022-01-01 11:11:11'
          format: date-time
        deleted_at:
          type:
            - string
            - 'null'
          example: '2022-01-01 11:11:11'
          format: date-time
      required:
        - user_id
        - title
        - contents
        - read
        - category_id
        - url
    InformationCategory:
      type: object
      x-examples:
        example-1:
          id: 1
          name: string
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: 参加希望
          maxLength: 100
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - name
      examples:
        - id: 1
          name: 参加希望
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    Teacher:
      type: object
      x-examples:
        example-1:
          id: 1
          name: string
          email: string
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      examples:
        - id: 1
          name: 西野　直幸
          email: nishino@asojuku.ac.jp
          password: pa$$word
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: 西野　直幸
          maxLength: 30
        email:
          type: string
          format: email
          maxLength: 25
          example: nishino@asojuku.ac.jp
        password:
          type: string
          format: password
          minLength: 8
          pattern: '(?=.*[a-z)(?=.*[A-Z])(?=.*[0-9])(?=.*[\/\-\_ΔΣΩ])[a-zA-Z0-9]'
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - name
        - email
        - password
    Event:
      type: object
      x-examples:
        example-1:
          id: 1
          teacher_id: 1
          title: string
          contents: string
          due: '2022-01-01 11:11:11'
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      examples:
        - id: 1
          teacher_id: 1
          title: コーディング大会
          contents: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
          due: '2022-01-01 11:11:11'
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        teacher_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        title:
          type: string
          maxLength: 30
          example: コーディング大会
        contents:
          type: string
          example: '6/29(水) 13:30~15:00 133、134教室でJavaのコーディング大会をします'
          maxLength: 1024
        due:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - teacher_id
        - title
        - contents
        - due
    SkillRequest:
      type: object
      x-examples:
        example-1:
          id: 1
          user_id: 1
          name: string
          message: string
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        user_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        name:
          type: string
          example: skill1
          maxLength: 255
        message:
          type: string
          example: 勉強したいから
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - user_id
        - name
        - message
      examples:
        - id: 1
          user_id: 1
          name: skill1
          message: 勉強したいから
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
    SkillRequestTeacher:
      type: object
      x-examples:
        example-1:
          id: 1
          skill_request_id: 1
          skill_id: 1
          teacher_id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: '2022-01-01 11:11:11'
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        skill_request_id:
          type: integer
          minimum: 1
          maximum: 255
          format: int64
          example: 1
        skill_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        teacher_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        updated_at:
          type: string
          format: date-time
          example: '2022-01-01 11:11:11'
        deleted_at:
          type:
            - string
            - 'null'
          format: date-time
          example: '2022-01-01 11:11:11'
      required:
        - skill_request_id
        - skill_id
        - teacher_id
      examples:
        - id: 1
          skill_request_id: 1
          skill_id: 1
          teacher_id: 1
          created_at: '2022-01-01 11:11:11'
          updated_at: '2022-01-01 11:11:11'
          deleted_at: null
  securitySchemes: {}
  parameters: {}
tags:
  - name: EndPoint
  - name: Models
